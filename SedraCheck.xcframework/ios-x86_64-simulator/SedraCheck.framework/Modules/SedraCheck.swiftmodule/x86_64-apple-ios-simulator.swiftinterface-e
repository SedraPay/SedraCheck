// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6.1 (swiftlang-5.6.0.323.66 clang-1316.0.20.12)
// swift-module-flags: -target x86_64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name SedraCheck
import AVFoundation
import AVKit
import CoreImage
import CoreMotion
import CoreVideo
import Foundation
import Network
@_exported import SedraCheck
import Swift
import SystemConfiguration
import UIKit
import VideoToolbox
import Vision
import _Concurrency
public struct ImageMatchingResponse : Swift.Codable {
  public var isIdentical: Swift.Bool?
  public var confidence: Swift.Float?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct SedraCheckDocument {
  public var image: UIKit.UIImage?
  public var documentSide: SedraCheck.DocumentSideEnum?
}
public struct HTTPMethod : Swift.RawRepresentable, Swift.Equatable, Swift.Hashable {
  public static let connect: SedraCheck.HTTPMethod
  public static let delete: SedraCheck.HTTPMethod
  public static let get: SedraCheck.HTTPMethod
  public static let head: SedraCheck.HTTPMethod
  public static let options: SedraCheck.HTTPMethod
  public static let patch: SedraCheck.HTTPMethod
  public static let post: SedraCheck.HTTPMethod
  public static let put: SedraCheck.HTTPMethod
  public static let trace: SedraCheck.HTTPMethod
  public let rawValue: Swift.String
  public init(rawValue: Swift.String)
  public typealias RawValue = Swift.String
}
public struct ConfigureScanDocumentsViews {
  public var ConfigureDocumentsCameraPage: SedraCheck.ConfigureDocumentsCameraPage?
  public var ConfigureDocumentsEditPage: SedraCheck.ConfigureDocumentsEditPage?
  public var ConfigureDocumentsPreviewPage: SedraCheck.ConfigureDocumentsPreviewPage?
  public init(ConfigureDocumentsCameraPage: SedraCheck.ConfigureDocumentsCameraPage? = nil, ConfigureDocumentsEditPage: SedraCheck.ConfigureDocumentsEditPage? = nil, ConfigureDocumentsPreviewPage: SedraCheck.ConfigureDocumentsPreviewPage? = nil)
}
public struct ConfigureDocumentsCameraPage {
  public var cameraViewBackgroundColor: UIKit.UIColor?
  public var topHintCameraLabelColor: UIKit.UIColor?
  public var topHintCameraLabelTitle: Swift.String?
  public var topHintCameraIsHidden: Swift.Bool?
  public var topHintCameraLabelNumberOfLines: Swift.Int?
  public var frontIDLabelColor: UIKit.UIColor?
  public var frontIDLabelTitle: Swift.String?
  public var frontIDIsHidden: Swift.Bool?
  public var backIDLabelColor: UIKit.UIColor?
  public var backIDLabelTitle: Swift.String?
  public var backIDIsHidden: Swift.Bool?
  public var passportLabelColor: UIKit.UIColor?
  public var passportLabelTitle: Swift.String?
  public var passportIsHidden: Swift.Bool?
  public var frontDrivingLicenseLabelColor: UIKit.UIColor?
  public var frontDrivingLicenseLabelTitle: Swift.String?
  public var frontDrivingLicenseIsHidden: Swift.Bool?
  public var backDrivingLicenseLabelColor: UIKit.UIColor?
  public var backDrivingLicenseLabelTitle: Swift.String?
  public var backDrivingLicenseIsHidden: Swift.Bool?
  public var documentTypeLabelNumberOfLines: Swift.Int?
  public var fontNameAndSize: UIKit.UIFont?
  public var captureButtonImage: UIKit.UIImage?
  public var captureButtonImageURL: Swift.String?
  public var captureButtonIsHidden: Swift.Bool?
  public var captureButtonTitle: Swift.String?
  public var captureButtonColor: UIKit.UIColor?
  public var captureButtonFontColor: UIKit.UIColor?
  public var captureButtonFontNameAndSize: UIKit.UIFont?
  public var captureButtonImageTintColor: UIKit.UIColor?
  public var closeButtonImageURL: Swift.String?
  public var closeButtonImage: UIKit.UIImage?
  public var closeButtonIsHidden: Swift.Bool?
  public var closeButtonTitle: Swift.String?
  public var closeButtonColor: UIKit.UIColor?
  public var closeButtonFontColor: UIKit.UIColor?
  public var closeButtonFontNameAndSize: UIKit.UIFont?
  public var closeButtonImageTintColor: UIKit.UIColor?
  public var flashButtonImageURL: Swift.String?
  public var flashButtonImage: UIKit.UIImage?
  public var flashButtonIsHidden: Swift.Bool?
  public var flashButtonTitle: Swift.String?
  public var flashButtonColor: UIKit.UIColor?
  public var flashButtonFontColor: UIKit.UIColor?
  public var flashButtonFontNameAndSize: UIKit.UIFont?
  public var flashButtonImageTintColor: UIKit.UIColor?
  public init(cameraViewBackgroundColor: UIKit.UIColor? = .black, topHintCameraLabelColor: UIKit.UIColor? = .white, topHintCameraLabelTitle: Swift.String? = NSLocalizedString("Please get close to the ID/Passport so it would fill the empty area", comment: ""), topHintCameraIsHidden: Swift.Bool? = false, topHintCameraLabelNumberOfLines: Swift.Int? = 0, frontIDLabelColor: UIKit.UIColor? = .white, frontIDLabelTitle: Swift.String? = NSLocalizedString("Scan your ID front face", comment: ""), frontIDIsHidden: Swift.Bool? = false, backIDLabelColor: UIKit.UIColor? = .white, backIDLabelTitle: Swift.String? = NSLocalizedString("Scan your ID Back face", comment: ""), backIDIsHidden: Swift.Bool? = false, passportLabelColor: UIKit.UIColor? = .white, passportLabelTitle: Swift.String? = NSLocalizedString("Scan your passport", comment: ""), passportIsHidden: Swift.Bool? = false, frontDrivingLicenseLabelColor: UIKit.UIColor? = .white, frontDrivingLicenseLabelTitle: Swift.String? = NSLocalizedString("Scan your Driving front face", comment: ""), frontDrivingLicenseIsHidden: Swift.Bool? = false, backDrivingLicenseLabelColor: UIKit.UIColor? = .white, backDrivingLicenseLabelTitle: Swift.String? = NSLocalizedString("Scan your Driving back face", comment: ""), backDrivingLicenseIsHidden: Swift.Bool? = false, documentTypeLabelNumberOfLines: Swift.Int? = 0, fontNameAndSize: UIKit.UIFont? = .systemFont(ofSize: 13), captureButtonImage: UIKit.UIImage? = nil, captureButtonImageURL: Swift.String? = "", captureButtonIsHidden: Swift.Bool? = false, captureButtonTitle: Swift.String? = "", captureButtonColor: UIKit.UIColor? = .clear, captureButtonFontColor: UIKit.UIColor? = .white, captureButtonFontNameAndSize: UIKit.UIFont? = .systemFont(ofSize: 13), captureButtonImageTintColor: UIKit.UIColor? = .white, closeButtonImageURL: Swift.String? = "", closeButtonImage: UIKit.UIImage? = nil, closeButtonIsHidden: Swift.Bool? = false, closeButtonTitle: Swift.String? = "", closeButtonColor: UIKit.UIColor? = .clear, closeButtonFontColor: UIKit.UIColor? = .white, closeButtonFontNameAndSize: UIKit.UIFont? = .systemFont(ofSize: 13), closeButtonImageTintColor: UIKit.UIColor? = .white, flashButtonImageURL: Swift.String? = "", flashButtonImage: UIKit.UIImage? = nil, flashButtonIsHidden: Swift.Bool? = false, flashButtonTitle: Swift.String? = "", flashButtonColor: UIKit.UIColor? = .clear, flashButtonFontColor: UIKit.UIColor? = .white, flashButtonFontNameAndSize: UIKit.UIFont? = .systemFont(ofSize: 13), flashButtonImageTintColor: UIKit.UIColor? = .white)
}
public struct ConfigureDocumentsEditPage {
  public var editPageBackgroundColor: UIKit.UIColor?
  public var outlinesCroppingColor: UIKit.UIColor?
  public var backButtonImage: UIKit.UIImage?
  public var backButtonImageURL: Swift.String?
  public var backButtonTitle: Swift.String?
  public var backButtonIsHidden: Swift.Bool?
  public var backButtonColor: UIKit.UIColor?
  public var backButtonFontColor: UIKit.UIColor?
  public var backButtonFontNameAndSize: UIKit.UIFont?
  public var backButtonImageTintColor: UIKit.UIColor?
  public var cropButtonImage: UIKit.UIImage?
  public var cropButtonImageURL: Swift.String?
  public var cropButtonTitle: Swift.String?
  public var cropButtonIsHidden: Swift.Bool?
  public var cropButtonColor: UIKit.UIColor?
  public var cropButtonFontColor: UIKit.UIColor?
  public var cropButtonFontNameAndSize: UIKit.UIFont?
  public var cropButtonImageTintColor: UIKit.UIColor?
  public init(editPageBackgroundColor: UIKit.UIColor? = .black, outlinesCroppingColor: UIKit.UIColor? = .red, backButtonImage: UIKit.UIImage? = nil, backButtonImageURL: Swift.String? = "", backButtonTitle: Swift.String? = "", backButtonIsHidden: Swift.Bool? = false, backButtonColor: UIKit.UIColor? = .clear, backButtonFontColor: UIKit.UIColor? = .white, backButtonFontNameAndSize: UIKit.UIFont? = .systemFont(ofSize: 13), backButtonImageTintColor: UIKit.UIColor? = .white, cropButtonImage: UIKit.UIImage? = nil, cropButtonImageURL: Swift.String? = "", cropButtonTitle: Swift.String? = "", cropButtonIsHidden: Swift.Bool? = false, cropButtonColor: UIKit.UIColor? = .clear, cropButtonFontColor: UIKit.UIColor? = .white, cropButtonFontNameAndSize: UIKit.UIFont? = .systemFont(ofSize: 13), cropButtonImageTintColor: UIKit.UIColor? = .white)
}
public struct ConfigureDocumentsPreviewPage {
  public var previewPageBackgroundColor: UIKit.UIColor?
  public var reviewLabelTitle: Swift.String?
  public var reviewLabelColor: UIKit.UIColor
  public var reviewLabelNumberOfLine: Swift.Int?
  public var reviewLabelIsHidden: Swift.Bool?
  public var editScanButtonImage: UIKit.UIImage?
  public var editScanButtonImageURL: Swift.String?
  public var editScanButtonTitle: Swift.String?
  public var editScanButtonIsHidden: Swift.Bool?
  public var editScanButtonColor: UIKit.UIColor?
  public var editButtonFontColor: UIKit.UIColor?
  public var editButtonFontNameAndSize: UIKit.UIFont?
  public var editScanButtonImageTintColor: UIKit.UIColor?
  public var confirmButtonImage: UIKit.UIImage?
  public var confirmButtonImageURL: Swift.String?
  public var confirmButtonTitle: Swift.String?
  public var confirmButtonIsHidden: Swift.Bool?
  public var confirmScanButtonColor: UIKit.UIColor?
  public var confirmButtonFontColor: UIKit.UIColor?
  public var confirmButtonFontNameAndSize: UIKit.UIFont?
  public var confirmScanButtonImageTintColor: UIKit.UIColor?
  public var rotateButtonImage: UIKit.UIImage?
  public var rotateButtonImageURL: Swift.String?
  public var rotateButtonTitle: Swift.String?
  public var rotateButtonIsHidden: Swift.Bool?
  public var rotateScanButtonColor: UIKit.UIColor?
  public var rotateButtonFontColor: UIKit.UIColor?
  public var rotateButtonFontNameAndSize: UIKit.UIFont?
  public var rotateScanButtonImageTintColor: UIKit.UIColor?
  public init(previewPageBackgroundColor: UIKit.UIColor? = .black, reviewLabelTitle: Swift.String? = "", reviewLabelColor: UIKit.UIColor = .white, reviewLabelNumberOfLine: Swift.Int? = 0, reviewLabelIsHidden: Swift.Bool? = false, editScanButtonImage: UIKit.UIImage? = nil, editScanButtonImageURL: Swift.String? = "", editScanButtonTitle: Swift.String? = "", editScanButtonIsHidden: Swift.Bool? = false, editScanButtonColor: UIKit.UIColor? = .clear, editButtonFontColor: UIKit.UIColor? = .white, editButtonFontNameAndSize: UIKit.UIFont? = .systemFont(ofSize: 13), editScanButtonImageTintColor: UIKit.UIColor? = .white, confirmButtonImage: UIKit.UIImage? = nil, confirmButtonImageURL: Swift.String? = "", confirmButtonTitle: Swift.String? = "", confirmButtonIsHidden: Swift.Bool? = false, confirmScanButtonColor: UIKit.UIColor? = .clear, confirmButtonFontColor: UIKit.UIColor? = .white, confirmButtonFontNameAndSize: UIKit.UIFont? = .systemFont(ofSize: 13), confirmScanButtonImageTintColor: UIKit.UIColor? = .white, rotateButtonImage: UIKit.UIImage? = nil, rotateButtonImageURL: Swift.String? = "", rotateButtonTitle: Swift.String? = "", rotateButtonIsHidden: Swift.Bool? = false, rotateScanButtonColor: UIKit.UIColor? = .clear, rotateButtonFontColor: UIKit.UIColor? = .white, rotateButtonFontNameAndSize: UIKit.UIFont? = .systemFont(ofSize: 13), rotateScanButtonImageTintColor: UIKit.UIColor? = .white)
}
public struct ConfigureLivenessCheckView {
}
public enum ReachabilityError : Swift.Error {
  case failedToCreateWithAddress(Darwin.sockaddr_in)
  case failedToCreateWithHostname(Swift.String)
  case unableToSetCallback
  case unableToSetDispatchQueue
}
public let ReachabilityChangedNotification: Foundation.Notification.Name
open class Reachability {
  public typealias NetworkReachable = (SedraCheck.Reachability) -> ()
  public typealias NetworkUnreachable = (SedraCheck.Reachability) -> ()
  public enum NetworkStatus : Swift.CustomStringConvertible {
    case notReachable, reachableViaWiFi, reachableViaWWAN
    public var description: Swift.String {
      get
    }
    public static func == (a: SedraCheck.Reachability.NetworkStatus, b: SedraCheck.Reachability.NetworkStatus) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  open var whenReachable: SedraCheck.Reachability.NetworkReachable?
  open var whenUnreachable: SedraCheck.Reachability.NetworkUnreachable?
  open var reachableOnWWAN: Swift.Bool
  open var notificationCenter: Foundation.NotificationCenter
  open var currentReachabilityString: Swift.String {
    get
  }
  open var currentReachabilityStatus: SedraCheck.Reachability.NetworkStatus {
    get
  }
  required public init(reachabilityRef: SystemConfiguration.SCNetworkReachability)
  convenience public init?(hostname: Swift.String)
  convenience public init?()
  @objc deinit
}
extension SedraCheck.Reachability {
  public func startNotifier() throws
  public func stopNotifier()
  public var isReachable: Swift.Bool {
    get
  }
  public var isReachableViaWWAN: Swift.Bool {
    get
  }
  public var isReachableViaWiFi: Swift.Bool {
    get
  }
  public var description: Swift.String {
    get
  }
}
public struct GetCSPDInfoResponse : Swift.Codable {
  public let arabicName1: Swift.String?, arabicName2: Swift.String?, arabicName3: Swift.String?, arabicName4: Swift.String?
  public let birthOrder: Swift.String?
  public let identityCardExpiryDate: Foundation.Date?, birthDate: Foundation.Date?
  public let birthOffice: Swift.String?, birthCountry: Swift.String?
  public let birthPSDate: Foundation.Date?
  public let birthKada: Swift.String?, birthLiwa: Swift.String?
  public let bookDate: Foundation.Date?, cardDate: Foundation.Date?
  public let cardNumber: Swift.String?
  public let cardExpiryDate: Foundation.Date?, changeDateTime: Foundation.Date?
  public let changeFlag: Swift.String?, chkd: Swift.String?, civilRegistrationNumber: Swift.String?, civilRegistrationOffice: Swift.String?
  public let deathStatus: Swift.String?, englishName1: Swift.String?, englishName2: Swift.String?, englishName3: Swift.String?
  public let englishName4: Swift.String?, famno: Swift.String?, famsts: Swift.String?, passportFileNumber: Swift.String?
  public let fatherNationalNumber: Swift.String?, motherNationality: Swift.String?, motherNationalNumber: Swift.String?, motherName: Swift.String?
  public let nationality: Swift.String?, nationalNumber: Swift.String?, passportNumber: Swift.String?
  public let passportIssueDate: Foundation.Date?, passportExpiryDate: Foundation.Date?
  public let passportName1: Swift.String?, passportName2: Swift.String?, passportName3: Swift.String?, passportName4: Swift.String?
  public let religionNumber: Swift.String?, religionArabicName: Swift.String?, religionEnglishName: Swift.String?, residenceCode: Swift.String?
  public let residenceInfo: Swift.String?, sex: Swift.String?
  public let isWanted: Swift.Bool?
  public let birthGovern: SedraCheck.BirthGovern?
  public let fileOffice: SedraCheck.Office?, fatherCivilOffice: SedraCheck.Office?, passportOffice: SedraCheck.Office?
  public let socialStatus: SedraCheck.SocialStatus?
  public let message: Swift.String?
  public let isSuccess: Swift.Bool?
  public let errors: [Swift.String]?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct BirthGovern : Swift.Codable {
  public let cityNumber: Swift.String?, arabicCityName: Swift.String?, englishCityName: Swift.String?, governNumber: Swift.String?
  public let kadaNumber: Swift.String?, liwaNumber: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct Office : Swift.Codable {
  public let compOffice: Swift.String?, englishName: Swift.String?, contractOfficeNumber: Swift.String?, address: Swift.String?
  public let officeNumber: Swift.String?, arabicName: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct SocialStatus : Swift.Codable {
  public let englishName: Swift.String?, arabicName: Swift.String?, statusNumber: Swift.String?, statusName: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public protocol SedraCheckCloseJourneyDelegate {
  func didFinishCloseJourneyWithSuccess()
  func didFinishCloseJourneyWithError(error: SedraCheck.SedraCheckError)
}
@_hasMissingDesignatedInitializers final public class SedraCheckCloseJourney {
  final public var delegate: SedraCheck.SedraCheckCloseJourneyDelegate?
  final public func closeJourneyAPI(customerId: Swift.String?)
  @objc deinit
}
public var hasSafeArea: Swift.Bool {
  get
}
public enum DocumentTypeEnum : Swift.Int {
  case id
  case passport
  case drivingLicense
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum DocumentSideEnum : Swift.Int {
  case front
  case back
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum SedraCheckError : Swift.Error {
  case failedToCreateSession
  case nonValidServerURL
  case emptyServerURL
  case severURLIsNil
  case createJourneyError
  case journeyIsNotGenerated
  case complyError
  case failedToUploadImage
  case idDocumentVerificationError
  case cameraAccessDenied
  case serverError
  case imageLoadingError
  case emptyScreeningNameError
  public static func == (a: SedraCheck.SedraCheckError, b: SedraCheck.SedraCheckError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct SedraCheckDataResponse<Success, Failure> where Failure : Swift.Error {
  public let request: Foundation.URLRequest?
  public let response: Foundation.HTTPURLResponse?
  public let data: Foundation.Data?
  public let metrics: Foundation.URLSessionTaskMetrics?
  public let serializationDuration: Foundation.TimeInterval
  public let result: Swift.Result<Success, Failure>
  public var value: Success? {
    get
  }
  public var error: Failure? {
    get
  }
  public init(request: Foundation.URLRequest?, response: Foundation.HTTPURLResponse?, data: Foundation.Data?, metrics: Foundation.URLSessionTaskMetrics?, serializationDuration: Foundation.TimeInterval, result: Swift.Result<Success, Failure>)
}
public enum SedraCheckAFError : Swift.Error {
}
public struct GetNationalities : Swift.Codable {
  public let nationalities: [SedraCheck.Nationality]?
  public let isSuccess: Swift.Bool?
  public let errors: [Swift.String]?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct Nationality : Swift.Codable {
  public var nationalityID: Swift.Int?
  public var isoCode: Swift.String?, name: Swift.String?
  public var nationalityIDTypes: [SedraCheck.NationalityIDType]?
  public init(nationalityID: Swift.Int?, isoCode: Swift.String?, name: Swift.String?, nationalityIDTypes: [SedraCheck.NationalityIDType]?)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct NationalityIDType : Swift.Codable {
  public var typeID: Swift.Int?
  public var name: SedraCheck.NationalityIdTypeName?
  public var numberOfImages: Swift.Int?
  public init(typeID: Swift.Int?, name: SedraCheck.NationalityIdTypeName?, numberOfImages: Swift.Int?)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public enum NationalityIdTypeName : Swift.String, Swift.Codable {
  case idCard
  case passport
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum SedraCheckJourneyType : Swift.Int {
  case unknown
  case new
  case update
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public protocol SedraCheckJourneyDelegate : ObjectiveC.NSObjectProtocol {
  func didFinishCreatingJourneyWithError(error: SedraCheck.SedraCheckError)
  func didFinishCreatingJourneyWithSuccess(journeyId: Swift.String)
  func didGetNationalitiesWithSuccess(response: SedraCheck.GetNationalities)
  func didGetNationalitiesWithError(error: SedraCheck.SedraCheckError)
  func didGetCSPDInfoWithSuccess(response: SedraCheck.GetCSPDInfoResponse)
  func didGetCSPDInfoWithError(error: SedraCheck.SedraCheckError)
}
@_hasMissingDesignatedInitializers final public class SedraCheck {
  public static let livenessCheck: SedraCheck.SedraCheckLivenessCheck
  public static let documentsCheck: SedraCheck.SedraCheckDocuments
  public static let shared: SedraCheck.SedraCheck
  public static let comply: SedraCheck.SedraComply
  public static let closeJourney: SedraCheck.SedraCheckCloseJourney
  final public var delegate: SedraCheck.SedraCheckJourneyDelegate?
  final public var scannedDocuments: [SedraCheck.SedraCheckDocument]?
  final public var livenessImage: UIKit.UIImage?
  final public var livenessImageId: Swift.String?
  final public var imagesIds: [SedraCheck.ServerImageDocument]?
  final public func setSettings(serverKey: Swift.String, serverURLString: Swift.String?, _ needsLogging: Swift.Bool = false, _ journeyType: SedraCheck.SedraCheckJourneyType = .unknown)
  final public func getNationalities()
  final public func getCSPDInfo(nationalNumber: Swift.String)
  @objc deinit
}
public protocol EditImageViewDelegate : AnyObject {
  func cropped(image: UIKit.UIImage)
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) final public class EditImageViewController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) weak final public var delegate: SedraCheck.EditImageViewDelegate?
  @_Concurrency.MainActor(unsafe) @objc override final public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override final public func viewDidLayoutSubviews()
  @_Concurrency.MainActor(unsafe) final public func cropImage()
  @_Concurrency.MainActor(unsafe) final public func rotateImage()
  @objc deinit
}
public struct SedraCheckScreeningResponse : Swift.Codable {
  public let requestID: Swift.String?, requestStatus: Swift.String?, requestStatusDescription: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public protocol SedraCheckLivenessCheckDelegate {
  func didPressCancel()
  func didGetImageSuccessfully(data: UIKit.UIImage)
  func didGetImageMatchingResponseSuccessfully(response: SedraCheck.ImageMatchingResponse)
  func didGetError(errorMessage: Swift.String)
  func LivenessCheckPageError(error: SedraCheck.SedraCheckError)
}
@_hasMissingDesignatedInitializers final public class SedraCheckLivenessCheck {
  final public var delegate: SedraCheck.SedraCheckLivenessCheckDelegate?
  final public func checkLiveness(viewController: SedraCheck.SedraCheckLivenessCheckDelegate, detectOptions: [SedraCheck.DetectionOptions], isDetectionOptionsSorted: Swift.Bool? = false)
  final public func uploadLivenessCheckImage()
  @objc deinit
}
public struct ServerImageDocument {
}
public protocol CameraScannerViewOutputDelegate : AnyObject {
  func captureImageFailWithError(error: Swift.Error)
  func captureImageSuccess(image: UIKit.UIImage, withQuad quad: SedraCheck.Quadrilateral?)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class CameraScannerViewController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) final public var isAutoScanEnabled: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) weak final public var delegate: SedraCheck.CameraScannerViewOutputDelegate?
  @_Concurrency.MainActor(unsafe) @objc override final public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override final public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override final public func viewDidLayoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override final public func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override final public func touchesBegan(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor(unsafe) final public func capture()
  @_Concurrency.MainActor(unsafe) final public func toggleFlash()
  @_Concurrency.MainActor(unsafe) final public func toggleAutoScan()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension UIKit.UIImage {
  convenience public init?(pixelBuffer: CoreVideo.CVPixelBuffer)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class BlurView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @_Concurrency.MainActor(unsafe) public func maskToRoi(roi: UIKit.UIView)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class ScannerViewController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) @objc override final public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override final public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override final public func viewDidLayoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override final public func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override final public func touchesBegan(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public struct SedraCheckDocumentVerificationResponse : Swift.Codable {
  public let extractedFields: [SedraCheck.ExtractedField]?
  public let validationResult: SedraCheck.ValidationResult?
  public let frontImageID: Swift.String?, backImageID: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct ExtractedField : Swift.Codable {
  public let name: Swift.String?
  public let value: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct ValidationResult : Swift.Codable {
  public let result: Swift.String?
  public let validationChecks: [SedraCheck.ValidationCheck]?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct ValidationCheck : Swift.Codable {
  public let name: Swift.String?, value: Swift.String?, result: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct Quadrilateral {
  public var topLeft: CoreGraphics.CGPoint
  public var topRight: CoreGraphics.CGPoint
  public var bottomRight: CoreGraphics.CGPoint
  public var bottomLeft: CoreGraphics.CGPoint
  public var description: Swift.String {
    get
  }
}
extension SedraCheck.Quadrilateral : Swift.Equatable {
  public static func == (lhs: SedraCheck.Quadrilateral, rhs: SedraCheck.Quadrilateral) -> Swift.Bool
}
public enum DetectionOptions {
  case blink
  case lookRight
  case lookLeft
  case singleFaceDetect
  case smile
  public static func == (a: SedraCheck.DetectionOptions, b: SedraCheck.DetectionOptions) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol SedraComplyDelegate {
  func screeningFinishedWithSuccess(response: SedraCheck.SedraCheckScreeningResponse)
  func screeningFinishedWithError(message: SedraCheck.SedraCheckError)
  func emptyNamesError(error: SedraCheck.SedraCheckError)
}
@_hasMissingDesignatedInitializers final public class SedraComply {
  final public var delegate: SedraCheck.SedraComplyDelegate?
  final public func screenCustomer(firstName: Swift.String, secondName: Swift.String?, thirdName: Swift.String?, lastName: Swift.String)
  @objc deinit
}
public protocol ImageScannerControllerDelegate : ObjectiveC.NSObjectProtocol {
  func imageScannerController(_ scanner: SedraCheck.ImageScannerController, didFinishScanningWithResults results: SedraCheck.ImageScannerResults)
  func imageScannerControllerDidCancel(_ scanner: SedraCheck.ImageScannerController)
  func imageScannerController(_ scanner: SedraCheck.ImageScannerController, didFailWithError error: Swift.Error)
}
@objc @_Concurrency.MainActor(unsafe) final public class ImageScannerController : UIKit.UINavigationController {
  @_Concurrency.MainActor(unsafe) weak final public var imageScannerDelegate: SedraCheck.ImageScannerControllerDelegate?
  @_Concurrency.MainActor(unsafe) @objc override final public var supportedInterfaceOrientations: UIKit.UIInterfaceOrientationMask {
    @_Concurrency.MainActor(unsafe) @objc get
  }
  @_Concurrency.MainActor(unsafe) required public init(image: UIKit.UIImage? = nil, delegate: SedraCheck.ImageScannerControllerDelegate? = nil)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) final public func useImage(image: UIKit.UIImage)
  @_Concurrency.MainActor(unsafe) final public func resetScanner()
  @objc deinit
}
public struct ImageScannerScan {
  public enum ImageScannerError : Swift.Error {
    case failedToGeneratePDF
    public static func == (a: SedraCheck.ImageScannerScan.ImageScannerError, b: SedraCheck.ImageScannerScan.ImageScannerError) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public var image: UIKit.UIImage
  public func generatePDFData(completion: @escaping (Swift.Result<Foundation.Data, SedraCheck.ImageScannerScan.ImageScannerError>) -> Swift.Void)
}
public struct ImageScannerResults {
  public var originalScan: SedraCheck.ImageScannerScan
  public var croppedScan: SedraCheck.ImageScannerScan
  public var enhancedScan: SedraCheck.ImageScannerScan?
  public var doesUserPreferEnhancedScan: Swift.Bool
  public var detectedRectangle: SedraCheck.Quadrilateral
  @available(*, unavailable, renamed: "originalScan")
  public var originalImage: UIKit.UIImage?
  @available(*, unavailable, renamed: "croppedScan")
  public var scannedImage: UIKit.UIImage?
  @available(*, unavailable, renamed: "enhancedScan")
  public var enhancedImage: UIKit.UIImage?
  @available(*, unavailable, renamed: "doesUserPreferEnhancedScan")
  public var doesUserPreferEnhancedImage: Swift.Bool
}
public enum ImageScannerControllerError : Swift.Error {
  case authorization
  case inputDevice
  case capture
  case ciImageCreation
  public static func == (a: SedraCheck.ImageScannerControllerError, b: SedraCheck.ImageScannerControllerError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension SedraCheck.ImageScannerControllerError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
public protocol SedraCheckDocumentsDelegate {
  func userDidCloseCamera()
  func userFinishCapturingDocument(documents: [SedraCheck.SedraCheckDocument])
  func didFinishWithError(error: SedraCheck.SedraCheckError)
  func userFinishCapturingDocumentsWithResponse(documents: [SedraCheck.SedraCheckDocument], response: SedraCheck.SedraCheckDocumentVerificationResponse)
  func userFinishCapturingDocumentsWithError(documents: [SedraCheck.SedraCheckDocument], error: SedraCheck.SedraCheckError)
}
@_hasMissingDesignatedInitializers final public class SedraCheckDocuments {
  final public var delegate: SedraCheck.SedraCheckDocumentsDelegate?
  final public func captureDocuments(nationality: SedraCheck.Nationality, documentType: SedraCheck.NationalityIDType, configuration: SedraCheck.ConfigureScanDocumentsViews?)
  final public func extractData()
  @objc deinit
}
extension SedraCheck.Reachability.NetworkStatus : Swift.Equatable {}
extension SedraCheck.Reachability.NetworkStatus : Swift.Hashable {}
extension SedraCheck.DocumentTypeEnum : Swift.Equatable {}
extension SedraCheck.DocumentTypeEnum : Swift.Hashable {}
extension SedraCheck.DocumentTypeEnum : Swift.RawRepresentable {}
extension SedraCheck.DocumentSideEnum : Swift.Equatable {}
extension SedraCheck.DocumentSideEnum : Swift.Hashable {}
extension SedraCheck.DocumentSideEnum : Swift.RawRepresentable {}
extension SedraCheck.SedraCheckError : Swift.Equatable {}
extension SedraCheck.SedraCheckError : Swift.Hashable {}
extension SedraCheck.NationalityIdTypeName : Swift.Equatable {}
extension SedraCheck.NationalityIdTypeName : Swift.Hashable {}
extension SedraCheck.NationalityIdTypeName : Swift.RawRepresentable {}
extension SedraCheck.SedraCheckJourneyType : Swift.Equatable {}
extension SedraCheck.SedraCheckJourneyType : Swift.Hashable {}
extension SedraCheck.SedraCheckJourneyType : Swift.RawRepresentable {}
extension SedraCheck.DetectionOptions : Swift.Equatable {}
extension SedraCheck.DetectionOptions : Swift.Hashable {}
extension SedraCheck.ImageScannerScan.ImageScannerError : Swift.Equatable {}
extension SedraCheck.ImageScannerScan.ImageScannerError : Swift.Hashable {}
extension SedraCheck.ImageScannerControllerError : Swift.Equatable {}
extension SedraCheck.ImageScannerControllerError : Swift.Hashable {}
