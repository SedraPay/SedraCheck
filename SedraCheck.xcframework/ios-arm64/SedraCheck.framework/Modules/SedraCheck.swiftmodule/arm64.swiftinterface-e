// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5.2 (swiftlang-1300.0.47.5 clang-1300.0.29.30)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name SedraCheck
import AVFoundation
import AVKit
import Alamofire
import CoreVideo
import Foundation
import Lottie
@_exported import SedraCheck
import Swift
import UIKit
import VideoToolbox
import _Concurrency
public struct ImageMatchingResponse : Swift.Codable {
  public var isIdentical: Swift.Bool?
  public var confidence: Swift.Float?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct SedraCheckDocument {
  public var image: UIKit.UIImage?
  public var documentSide: SedraCheck.DocumentSideEnum?
}
public var hasSafeArea: Swift.Bool {
  get
}
public enum DocumentTypeEnum : Swift.Int {
  case id
  case passport
  case drivingLicense
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum DocumentSideEnum : Swift.Int {
  case front
  case back
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum SedraCheckJourneyType : Swift.Int {
  case unknown
  case new
  case update
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public protocol SedraCheckJourneyDelegate : ObjectiveC.NSObjectProtocol {
  func didFinishCreatingJourneyWithError(error: Swift.String)
  func didFinishCreatingJourneyWithSuccess(journeyId: Swift.String)
}
@_hasMissingDesignatedInitializers final public class SedraCheck {
  public static let livenessCheck: SedraCheck.SedraCheckLivenessCheck
  public static let documentsCheck: SedraCheck.SedraCheckDocuments
  public static let shared: SedraCheck.SedraCheck
  public static let comply: SedraCheck.SedraComply
  final public var delegate: SedraCheck.SedraCheckJourneyDelegate?
  final public var scannedDocuments: [SedraCheck.SedraCheckDocument]?
  final public var livenessImage: UIKit.UIImage?
  final public var livenessImageId: Swift.String?
  final public var imagesIds: [SedraCheck.ServerImageDocument]?
  final public func setSettings(serverKey: Swift.String, serverURLString: Swift.String?, _ needsLogging: Swift.Bool = false, _ journeyType: SedraCheck.SedraCheckJourneyType = .unknown)
  @objc deinit
}
public struct SedraCheckScreeningResponse : Swift.Codable {
  public let requestID: Swift.String?, requestStatus: Swift.String?, requestStatusDescription: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public protocol SedraCheckLivenessCheckDelegate {
  func didPressCancel()
  func didGetImageSuccessfully(data: UIKit.UIImage)
  func didGetImageMatchingResponseSuccessfully(response: SedraCheck.ImageMatchingResponse)
  func didGetError(errorMessage: Swift.String)
}
@_hasMissingDesignatedInitializers final public class SedraCheckLivenessCheck {
  final public var delegate: SedraCheck.SedraCheckLivenessCheckDelegate?
  final public func checkLiveness(viewController: SedraCheck.SedraCheckLivenessCheckDelegate)
  final public func uploadLivenessCheckImage()
  @objc deinit
}
public struct ServerImageDocument {
  public var imageID: Swift.String?
  public var documentSide: SedraCheck.DocumentSideEnum?
}
extension UIKit.UIImage {
  convenience public init?(pixelBuffer: CoreVideo.CVPixelBuffer)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class BlurView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @_Concurrency.MainActor(unsafe) public func maskToRoi(roi: UIKit.UIView)
  @objc deinit
}
public struct SedraCheckDocumentVerificationResponse : Swift.Codable {
  public let extractedFields: [SedraCheck.ExtractedField]?
  public let validationResult: SedraCheck.ValidationResult?
  public let frontImageID: Swift.String?, backImageID: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct ExtractedField : Swift.Codable {
  public let name: Swift.String?
  public let value: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct ValidationResult : Swift.Codable {
  public let result: Swift.String?
  public let validationChecks: [SedraCheck.ValidationCheck]?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct ValidationCheck : Swift.Codable {
  public let name: Swift.String?, value: Swift.String?, result: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public protocol SedraComplyDelegate {
  func screeningFinishedWithSuccess(response: SedraCheck.SedraCheckScreeningResponse)
  func screeningFinishedWithError(message: Swift.String)
}
@_hasMissingDesignatedInitializers final public class SedraComply {
  final public var delegate: SedraCheck.SedraComplyDelegate?
  final public func screenCustomer(firstName: Swift.String, secondName: Swift.String?, thirdName: Swift.String?, lastName: Swift.String)
  @objc deinit
}
public protocol SedraCheckDocumentsDelegate {
  func userDidCloseCamera()
  func userFinishCapturingDocument(documents: [SedraCheck.SedraCheckDocument])
  func userFinishCapturingDocumentsWithResponse(documents: [SedraCheck.SedraCheckDocument], response: SedraCheck.SedraCheckDocumentVerificationResponse)
  func userFinishCapturingDocumentsWithError(documents: [SedraCheck.SedraCheckDocument])
}
@_hasMissingDesignatedInitializers final public class SedraCheckDocuments {
  final public var delegate: SedraCheck.SedraCheckDocumentsDelegate?
  final public func captureDocuments(documentType: SedraCheck.DocumentTypeEnum)
  final public func uploadDocuments()
  @objc deinit
}
extension SedraCheck.DocumentTypeEnum : Swift.Equatable {}
extension SedraCheck.DocumentTypeEnum : Swift.Hashable {}
extension SedraCheck.DocumentTypeEnum : Swift.RawRepresentable {}
extension SedraCheck.DocumentSideEnum : Swift.Equatable {}
extension SedraCheck.DocumentSideEnum : Swift.Hashable {}
extension SedraCheck.DocumentSideEnum : Swift.RawRepresentable {}
extension SedraCheck.SedraCheckJourneyType : Swift.Equatable {}
extension SedraCheck.SedraCheckJourneyType : Swift.Hashable {}
extension SedraCheck.SedraCheckJourneyType : Swift.RawRepresentable {}
